#+title: nf-core bytesize on git

Should recommend people check out GitHub desktop, it's pretty easy to do good things, like rebase, add coauthors etc.

https://docs.github.com/en/get-started/using-git/about-git-rebase Some great further reading here


Talk about gh cli and making issues quickly

* GitHub is the daunting thing keeping people from contributing
:PROPERTIES:
:CREATED:  [2023-10-20 Fri 21:49]
:END:
* You've heard of the merge cowboy
:PROPERTIES:
:CREATED:  [2023-10-18 Wed 09:49]
:END:

Let's talk about the rebase ranger
* Topics
** What is a commit?

#+begin_quote
What are some basics of commits people should understand

#+end_quote

Understanding the basics of commits in Git is essential. Here are the key concepts to grasp:

1. **Atomic Commit Principle**:
   - Each commit should represent a single logical change.
   - This makes it easier to understand the history and revert changes if needed.

2. **Commit Messages**:
   - Should be clear and descriptive.
   - The first line is a summary, followed by a blank line, then a detailed description.

3. **Uniqueness of Commits**:
   - Each commit has a unique SHA-1 hash identifier.
   - The hash reflects the commit's entire history.

4. **Immutability**:
   - Commits are considered immutable.
   - Altering a commit creates a new commit with a different hash.

5. **Commit History**:
   - Commits form a directed acyclic graph (DAG), showcasing the history and sequence of changes.
   - One might call it a *B****Chain*

A solid understanding of these principles will set a strong foundation for mastering advanced Git features.

** Co-authoring commits

*** Introduction to Co-authoring Commits
- Paired programming, collaborative contributions to a single commit
- Visibility in a project's history. (~git blame~)

- ~Co-authored-by: name <name@example.com>~
- Pro tip: Use GitHub forwarding email
  ~Co-authored-by: github-user <github-user@users.noreply.github.com>~



*** Example commit

#+begin_src txt
This is a summary of the changes in this commit.

- More detailed explanation of the commit.
- List of changes or improvements made.

Co-authored-by: Jane Doe <jane.doe@example.com>
Co-authored-by: John Smith <john.smith@example.com>
#+end_src

*** TODO VSCode and GitHub Desktop screenshots

** git bisect
https://stackoverflow.com/questions/4713088/how-to-use-git-bisect#4714297
** Rewriting history
*** Amending commits

~git commit --amend~
- Amending a message ~git commit --amend -m "New commit message"~
  - ~git commit --amend --no-edit~
- Changes the commit hash

- For commits that have *not* been pushed to shared repositories(GitHub).

# - Mention that it's primarily used to correct the last commit but can be used with interactive rebase for earlier commits.
**** TODO Add GH Desktop screenshots
*** rebasing
[[https://wizardzines.com/images/uploads/46d480e3f5029644.png]]
https://wizardzines.com/comics/rules-for-rebasing/
**** interactive rebasing
** Worktrees
** gh cli things
- Forking a repo
- Making an issue
- Make a PR

** Direnv
https://www.youtube.com/watch?v=1joZLTgYLxY
